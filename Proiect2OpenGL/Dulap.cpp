#include "glos.h"
#include "gl.h"
#include "glu.h"
#include "glaux.h"
#include "math.h"

double planeEquation[4] = { 0.0, 0.0, 1.0, 0.0 };

GLuint textureDulap;

const int a = 0, b = 1, c = 2;
static GLfloat x = 0;
static GLfloat y = 0;
static GLfloat z = 0;
static GLfloat alfaX = 0.0f;
static GLfloat alfaY = 0.0f;
static GLfloat alfaZ = 0.0f;
static GLfloat leftDoorAngle = 0.0;
static GLfloat lightPosition[4] = { -11, 8, 1, 1 };

GLuint incarcaTextura(const char* s) {
    GLuint textureId = 0;
    AUX_RGBImageRec* pImagineTextura = auxDIBImageLoad(s);

    if (pImagineTextura != NULL) {
        glGenTextures(1, &textureId);
        glBindTexture(GL_TEXTURE_2D, textureId);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
        glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
        glTexImage2D(GL_TEXTURE_2D, 0, 3, pImagineTextura->sizeX, pImagineTextura->sizeY, 0, GL_RGB, GL_UNSIGNED_BYTE, pImagineTextura->data);
    }

    if (pImagineTextura) {
        if (pImagineTextura->data) {
            free(pImagineTextura->data);
        }
        free(pImagineTextura);
    }

    return textureId;
}


GLubyte rasters[][13] = {
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x36, 0x36, 0x36, 0x36},
{0x00, 0x00, 0x00, 0x66, 0x66, 0xff, 0x66, 0x66, 0xff, 0x66, 0x66, 0x00, 0x00},
{0x00, 0x00, 0x18, 0x7e, 0xff, 0x1b, 0x1f, 0x7e, 0xf8, 0xd8, 0xff, 0x7e, 0x18},
{0x00, 0x00, 0x0e, 0x1b, 0xdb, 0x6e, 0x30, 0x18, 0x0c, 0x76, 0xdb, 0xd8, 0x70},
{0x00, 0x00, 0x7f, 0xc6, 0xcf, 0xd8, 0x70, 0x70, 0xd8, 0xcc, 0xcc, 0x6c, 0x38},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x1c, 0x0c, 0x0e},
{0x00, 0x00, 0x0c, 0x18, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c},
{0x00, 0x00, 0x30, 0x18, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x18, 0x30},
{0x00, 0x00, 0x00, 0x00, 0x99, 0x5a, 0x3c, 0xff, 0x3c, 0x5a, 0x99, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x18, 0x18, 0x18, 0xff, 0xff, 0x18, 0x18, 0x18, 0x00, 0x00},
{0x00, 0x00, 0x30, 0x18, 0x1c, 0x1c, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x60, 0x60, 0x30, 0x30, 0x18, 0x18, 0x0c, 0x0c, 0x06, 0x06, 0x03, 0x03},
{0x00, 0x00, 0x3c, 0x66, 0xc3, 0xe3, 0xf3, 0xdb, 0xcf, 0xc7, 0xc3, 0x66, 0x3c},
{0x00, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78, 0x38, 0x18},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x03, 0xe7, 0x7e},
{0x00, 0x00, 0x7e, 0xe7, 0x03, 0x03, 0x07, 0x7e, 0x07, 0x03, 0x03, 0xe7, 0x7e},
{0x00, 0x00, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0xff, 0xcc, 0x6c, 0x3c, 0x1c, 0x0c},
{0x00, 0x00, 0x7e, 0xe7, 0x03, 0x03, 0x07, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0xff},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xc7, 0xfe, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x03, 0x03, 0xff},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xe7, 0x7e, 0xe7, 0xc3, 0xc3, 0xe7, 0x7e},
{0x00, 0x00, 0x7e, 0xe7, 0x03, 0x03, 0x03, 0x7f, 0xe7, 0xc3, 0xc3, 0xe7, 0x7e},
{0x00, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x38, 0x38, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x30, 0x18, 0x1c, 0x1c, 0x00, 0x00, 0x1c, 0x1c, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x06, 0x0c, 0x18, 0x30, 0x60, 0xc0, 0x60, 0x30, 0x18, 0x0c, 0x06},
{0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x60, 0x30, 0x18, 0x0c, 0x06, 0x03, 0x06, 0x0c, 0x18, 0x30, 0x60},
{0x00, 0x00, 0x18, 0x00, 0x00, 0x18, 0x18, 0x0c, 0x06, 0x03, 0xc3, 0xc3, 0x7e},
{0x00, 0x00, 0x3f, 0x60, 0xcf, 0xdb, 0xd3, 0xdd, 0xc3, 0x7e, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0x66, 0x3c, 0x18},
{0x00, 0x00, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
{0x00, 0x00, 0x7e, 0xe7, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0xfc, 0xce, 0xc7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc7, 0xce, 0xfc},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xc0, 0xff},
{0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfc, 0xc0, 0xc0, 0xc0, 0xff},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xcf, 0xc0, 0xc0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xff, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x7e},
{0x00, 0x00, 0x7c, 0xee, 0xc6, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06, 0x06},
{0x00, 0x00, 0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xe0, 0xf0, 0xd8, 0xcc, 0xc6, 0xc3},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0},
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xdb, 0xff, 0xff, 0xe7, 0xc3},
{0x00, 0x00, 0xc7, 0xc7, 0xcf, 0xcf, 0xdf, 0xdb, 0xfb, 0xf3, 0xf3, 0xe3, 0xe3},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xe7, 0x7e},
{0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
{0x00, 0x00, 0x3f, 0x6e, 0xdf, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0x66, 0x3c},
{0x00, 0x00, 0xc3, 0xc6, 0xcc, 0xd8, 0xf0, 0xfe, 0xc7, 0xc3, 0xc3, 0xc7, 0xfe},
{0x00, 0x00, 0x7e, 0xe7, 0x03, 0x03, 0x07, 0x7e, 0xe0, 0xc0, 0xc0, 0xe7, 0x7e},
{0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0xff},
{0x00, 0x00, 0x7e, 0xe7, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0xc3, 0xe7, 0xff, 0xff, 0xdb, 0xdb, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3},
{0x00, 0x00, 0xc3, 0x66, 0x66, 0x3c, 0x3c, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3},
{0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3},
{0x00, 0x00, 0xff, 0xc0, 0xc0, 0x60, 0x30, 0x7e, 0x0c, 0x06, 0x03, 0x03, 0xff},
{0x00, 0x00, 0x3c, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3c},
{0x00, 0x03, 0x03, 0x06, 0x06, 0x0c, 0x0c, 0x18, 0x18, 0x30, 0x30, 0x60, 0x60},
{0x00, 0x00, 0x3c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x3c},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18},
{0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x38, 0x30, 0x70},
{0x00, 0x00, 0x7f, 0xc3, 0xc3, 0x7f, 0x03, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xfe, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0},
{0x00, 0x00, 0x7e, 0xc3, 0xc0, 0xc0, 0xc0, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x7f, 0xc3, 0xc3, 0xc3, 0xc3, 0x7f, 0x03, 0x03, 0x03, 0x03, 0x03},
{0x00, 0x00, 0x7f, 0xc0, 0xc0, 0xfe, 0xc3, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x30, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x33, 0x1e},
{0x7e, 0xc3, 0x03, 0x03, 0x7f, 0xc3, 0xc3, 0xc3, 0x7e, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0xc0, 0xc0, 0xc0, 0xc0},
{0x00, 0x00, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00, 0x00, 0x18, 0x00},
{0x38, 0x6c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x0c, 0x00, 0x00, 0x0c, 0x00},
{0x00, 0x00, 0xc6, 0xcc, 0xf8, 0xf0, 0xd8, 0xcc, 0xc6, 0xc0, 0xc0, 0xc0, 0xc0},
{0x00, 0x00, 0x7e, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x78},
{0x00, 0x00, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xdb, 0xfe, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xfc, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x7c, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x7c, 0x00, 0x00, 0x00, 0x00},
{0xc0, 0xc0, 0xc0, 0xfe, 0xc3, 0xc3, 0xc3, 0xc3, 0xfe, 0x00, 0x00, 0x00, 0x00},
{0x03, 0x03, 0x03, 0x7f, 0xc3, 0xc3, 0xc3, 0xc3, 0x7f, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc0, 0xc0, 0xc0, 0xc0, 0xc0, 0xe0, 0xfe, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xfe, 0x03, 0x03, 0x7e, 0xc0, 0xc0, 0x7f, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x1c, 0x36, 0x30, 0x30, 0x30, 0x30, 0xfc, 0x30, 0x30, 0x30, 0x00},
{0x00, 0x00, 0x7e, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0xc6, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x18, 0x3c, 0x3c, 0x66, 0x66, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc3, 0xe7, 0xff, 0xdb, 0xc3, 0xc3, 0xc3, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xc3, 0x66, 0x3c, 0x18, 0x3c, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00},
{0xc0, 0x60, 0x60, 0x30, 0x18, 0x3c, 0x66, 0x66, 0xc3, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0xff, 0x60, 0x30, 0x18, 0x0c, 0x06, 0xff, 0x00, 0x00, 0x00, 0x00},
{0x00, 0x00, 0x0f, 0x18, 0x18, 0x18, 0x38, 0xf0, 0x38, 0x18, 0x18, 0x18, 0x0f},
{0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18},
{0x00, 0x00, 0xf0, 0x18, 0x18, 0x18, 0x1c, 0x0f, 0x1c, 0x18, 0x18, 0x18, 0xf0},
{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x8f, 0xf1, 0x60, 0x00, 0x00, 0x00}
};

GLuint fontOffset;

void makeRasterFont()
{
    glPixelStorei(GL_UNPACK_ALIGNMENT, 1);
    fontOffset = glGenLists(128);
    for (int i = 32; i < 127; i++) {
        glNewList(i + fontOffset, GL_COMPILE);
        {
            glBitmap(8, 13, 0.0, 2.0, 10.0, 0.0, rasters[i - 32]);
        }
        glEndList();
    }
}

void printString(const char* s)
{
    glPushAttrib(GL_LIST_BIT);
    glListBase(fontOffset);
    glCallLists(strlen(s), GL_UNSIGNED_BYTE, (GLubyte*)s);
    glPopAttrib();
}


void CALLBACK MutaStanga() {
    x = x - 2;
}

void CALLBACK MutaDreapta() {
    x = x + 2;
}

void CALLBACK MutaSus() {
    y += 2;
}

void CALLBACK MutaJos() {
    y -= 2;
}

void CALLBACK RotesteXStanga()
{
    alfaX = alfaX - 10;
}

void CALLBACK RotesteXDreapta()
{
    alfaX = alfaX + 10;
}

void CALLBACK RotesteYStanga()
{
    alfaY = alfaY - 10;
}

void CALLBACK RotesteYDreapta()
{
    alfaY = alfaY + 10;
}

void CALLBACK RotesteZStanga()
{
    alfaZ = alfaZ - 10;
}

void CALLBACK RotesteZDreapta()
{
    alfaZ = alfaZ + 10;
}

void CALLBACK mutaSursaFata() {
    if (lightPosition[c] < 100) {
        lightPosition[c] += 3;
    }
}

void CALLBACK mutaSursaSpate() {
    if (lightPosition[c] > -100) {
        lightPosition[c] -= 3;
    }
}

void CALLBACK mutaSursaDreapta() {
    if (lightPosition[a] < 100) {
        lightPosition[a] += 3;
    }
}

void CALLBACK mutaSursaStanga() {
    if (lightPosition[a] > -100) {
        lightPosition[a] -= 3;
    }
}
void CALLBACK OpenDoor() {
    if (leftDoorAngle < 180.0) {
        leftDoorAngle += 1.0;
    }
}

void CALLBACK CloseDoor() {
    if (leftDoorAngle > 0.0) {
        leftDoorAngle -= 1.0;
    }
}

void myInit() {
    glClearColor(1.0, 1.0, 1.0, 0.0);

    glEnable(GL_CLIP_PLANE0);


    glClipPlane(GL_CLIP_PLANE0, planeEquation);

    glDisable(GL_CLIP_PLANE0);

    glEnable(GL_DEPTH_TEST);
    glEnable(GL_TEXTURE_2D);

    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);

    GLfloat light_position[] = { -11, 8, 1, 1 };
    GLfloat ambientLight[] = { 0.3f, 0.3f, 0.3f, 1.0f };
    GLfloat diffuseLight[] = { 0.8f, 0.8f, 0.8f, 1.0f };
    GLfloat specularLight[] = { 1.0f, 1.0f, 1.0f, 1.0f };

    glLightfv(GL_LIGHT0, GL_AMBIENT, ambientLight);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuseLight);
    glLightfv(GL_LIGHT0, GL_SPECULAR, specularLight);
    glLightfv(GL_LIGHT0, GL_POSITION, lightPosition);

    GLfloat mat_ambient[] = { 0.25, 0.12, 0.06, 1.0 };
    GLfloat mat_diffuse[] = { 0.65, 0.16, 0.16, 1.0 };
    GLfloat mat_specular[] = { 0.3, 0.3, 0.3, 1.0 };
    GLfloat mat_shininess[] = { 20.0 };

    glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);

    glShadeModel(GL_SMOOTH);
    
    glShadeModel(GL_FLAT);

    makeRasterFont();
}

void drawCylinder(float radius, float height) {
    GLUquadric* quadric = gluNewQuadric();
    gluCylinder(quadric, radius, radius, height, 32, 32);
    gluDeleteQuadric(quadric);
}

void drawBezierCurve(float ctrlpoints[4][3]) {
    glMap1f(GL_MAP1_VERTEX_3, 0.0, 1.0, 3, 4, &ctrlpoints[0][0]);
    glEnable(GL_MAP1_VERTEX_3);
    glBegin(GL_LINE_STRIP);
    for (int i = 0; i <= 30; i++) {
        glEvalCoord1f((GLfloat)i / 30.0);
    }
    glEnd();
}

void drawBigBezierCurve() {
    GLfloat ctrlpoints[4][3] = {
        { -1.0, -6.0, 0.0}, { -3.0, 0.0, 0.0}, {3.0, 0.0, 0.0}, {1.0, 6.0, 0.0}
    };
    GLfloat brown[] = { 0.65, 0.16, 0.16, 1.0 };
    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, brown);
    drawBezierCurve(ctrlpoints);
}
void drawHandle1() {
    float verticalHeight = 1.2f;
    float horizontalWidth = 0.9f;
    float radius = 0.1f;
    GLfloat black[] = { 0.0, 0.0, 0.0, 1.0 };
    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, black);
    glPushMatrix();
    glTranslatef(-0.5f, 0.0f, -0.2f);
    glRotatef(90.0f, 1.0f, 0.0f, 0.0f);
    drawCylinder(radius, verticalHeight);
    glPopMatrix();
}

void drawHandle2() {
    float verticalHeight = 1.2f;
    float horizontalWidth = 0.9f;
    float radius = 0.1f;
    GLfloat black[] = { 0.0, 0.0, 0.0, 1.0 };
    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, black);
    glPushMatrix();
    glTranslatef(-3.9f, 0.0f, -0.2f);
    glRotatef(90.0f, 1.0f, 0.0f, 0.0f);
    drawCylinder(radius, verticalHeight);
    glPopMatrix();
}

void drawCube(float frontWidth, float frontHeight, float depth) {
    auxSolidBox(frontWidth, frontHeight, depth);
}

void drawFirstDoor() {
    float frontWidth = 10.0f;
    float frontHeight = 14.0f;
    float depth = 4.0f;
    
    glClipPlane(GL_CLIP_PLANE0, planeEquation);
    glDisable(GL_TEXTURE_2D);
    GLfloat red[] = { 1.0, 0.0, 0.0, 1.0 };
    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, red);

    drawCube(frontWidth / 2.3, frontHeight * 0.93, depth / 8.1);

    glPushMatrix();
    glTranslatef(frontWidth / 4.6, 0.0f, depth / 8.1f);
    drawHandle1();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(0.0f, 0.0f, depth / 15.2f);
    drawBigBezierCurve();
    glPopMatrix();
}

void drawSecondDoor() {
    float frontWidth = 10.0f;
    float frontHeight = 14.0f;
    float depth = 4.0f;
    GLfloat red[] = { 1.0, 0.0, 0.0, 1.0 };
    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, red);
    drawCube(frontWidth / 2.3, frontHeight * 0.93, depth / 8.1);

    glPushMatrix();
    glTranslatef(frontWidth / 4.6, 0.0f, depth / 8.1f); 
    drawHandle2();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(0.0f, 0.0f, depth / 15.2);
    drawBigBezierCurve();
    glPopMatrix();
}


void drawParallelepiped() {
    float frontWidth = 10.0f;
    float frontHeight = 14.0f;
    float depth = 4.0f;

    glBindTexture(GL_TEXTURE_2D, textureDulap);
    glEnable(GL_TEXTURE_2D);

    glPushMatrix();
    glBegin(GL_QUADS);
    {
        GLfloat mat_ambient[] = { 0.5, 0.5, 0.5, 1.0 };
        GLfloat mat_diffuse[] = { 0.8, 0.8, 0.8, 1.0 };

        glMaterialfv(GL_FRONT, GL_AMBIENT, mat_ambient);
        glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
     
        glNormal3f(0.0, 0.0, -1.0);
        glTexCoord2f(0.0f, 0.0f); glVertex3f(-frontWidth / 2, -frontHeight / 2, -depth / 2);
        glTexCoord2f(1.0f, 0.0f); glVertex3f(frontWidth / 2, -frontHeight / 2, -depth / 2);
        glTexCoord2f(1.0f, 1.0f); glVertex3f(frontWidth / 2, frontHeight / 2, -depth / 2);
        glTexCoord2f(0.0f, 1.0f);  glVertex3f(-frontWidth / 2, frontHeight / 2, -depth / 2);

        glNormal3f(-1.0, 0.0, 0.0);
        glTexCoord2f(0.0f, 0.0f); glVertex3f(-frontWidth / 2, -frontHeight / 2, -depth / 2);
        glTexCoord2f(1.0f, 0.0f);   glVertex3f(-frontWidth / 2, -frontHeight / 2, depth / 2);
        glTexCoord2f(1.0f, 1.0f); glVertex3f(-frontWidth / 2, frontHeight / 2, depth / 2);
        glTexCoord2f(0.0f, 1.0f); glVertex3f(-frontWidth / 2, frontHeight / 2, -depth / 2);

        glNormal3f(1.0, 0.0, 0.0);
        glTexCoord2f(0.0f, 0.0f); glVertex3f(frontWidth / 2, -frontHeight / 2, -depth / 2);
        glTexCoord2f(1.0f, 0.0f); glVertex3f(frontWidth / 2, -frontHeight / 2, depth / 2);
        glTexCoord2f(1.0f, 1.0f); glVertex3f(frontWidth / 2, frontHeight / 2, depth / 2);
        glTexCoord2f(0.0f, 1.0f);  glVertex3f(frontWidth / 2, frontHeight / 2, -depth / 2);


        glNormal3f(0.0, 1.0, 0.0);
        glTexCoord2f(0.0f, 0.0f); glVertex3f(-frontWidth / 2, frontHeight / 2, -depth / 2);
        glTexCoord2f(1.0f, 0.0f); glVertex3f(frontWidth / 2, frontHeight / 2, -depth / 2);
        glTexCoord2f(1.0f, 1.0f); glVertex3f(frontWidth / 2, frontHeight / 2, depth / 2);
        glTexCoord2f(0.0f, 1.0f);  glVertex3f(-frontWidth / 2, frontHeight / 2, depth / 2);


        glNormal3f(0.0, -1.0, 0.0);
        glTexCoord2f(0.0f, 0.0f); glVertex3f(-frontWidth / 2, -frontHeight / 2, -depth / 2);
        glTexCoord2f(1.0f, 0.0f);  glVertex3f(frontWidth / 2, -frontHeight / 2, -depth / 2);
        glTexCoord2f(1.0f, 1.0f); glVertex3f(frontWidth / 2, -frontHeight / 2, depth / 2);
        glTexCoord2f(0.0f, 1.0f); glVertex3f(-frontWidth / 2, -frontHeight / 2, depth / 2);
    }
    glEnd();
    glPopMatrix();

    glDisable(GL_TEXTURE_2D);
}
void drawLight()
{
    glDisable(GL_TEXTURE_2D);
    glPushMatrix();
    glTranslatef(lightPosition[a], lightPosition[b], lightPosition[c]);
    GLfloat yellow[] = { 1.0, 1.0, 0.0, 1.0 };
    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, yellow);
    auxSolidSphere(1);
    glPopMatrix();
}

void CALLBACK display() {

    glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();



    drawLight();
    GLfloat black[] = { 0.0, 0.0, 0.0, 1.0 };
    glMaterialfv(GL_FRONT, GL_AMBIENT_AND_DIFFUSE, black);
    glRasterPos2f(-3, -9);
    printString("IANCU ELENA");

    gluLookAt(0.0, 0.0, 5.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0);
    glTranslatef(x, y, z);
    glRotatef(alfaX, 1.0, 0.0, 0.0);
    glRotatef(alfaY, 0, 1.0, 0);
    glRotatef(alfaZ, 0.0, 0.0, 1.0);

    glPushMatrix();
    glTranslatef(-4.5, 0.0, 1.9);
    glRotatef(leftDoorAngle, 0.0, -1.0, 0.0);
    glTranslatef(+2.25, 0.0, 0.0);
    drawFirstDoor();
    glPopMatrix();

    glPushMatrix();
    glTranslatef(4.5, 0.0, 1.9);
    glRotatef(leftDoorAngle, 0.0, 1.0, 0.0);
    glTranslatef(-2.25, 0.0, 0.0);
    drawSecondDoor();
    glPopMatrix();


    glPushMatrix();
    drawParallelepiped();
    glPopMatrix();

    glFlush();
}


void CALLBACK myReshape(GLsizei w, GLsizei h) {
    if (!h) return;
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    if (w <= h) {
        glOrtho(-12.0, 12.0, -12.0 * (GLfloat)h / (GLfloat)w, 12.0 * (GLfloat)h / (GLfloat)w, -12.0, 12.0);
    }
    else {
        glOrtho(-12.0 * (GLfloat)w / (GLfloat)h, 12.0 * (GLfloat)w / (GLfloat)h, -12.0, 12.0, -12.0, 12.0);
    }
    glMatrixMode(GL_MODELVIEW);
}

/*
void CALLBACK myReshape(GLsizei w, GLsizei h) {
    if (!h) return;
    glViewport(0, 0, w, h);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    gluPerspective(45.0, (GLfloat)w / (GLfloat)h, 1.0, 500.0);
    glMatrixMode(GL_MODELVIEW);
}*/

int main(int argc, char** argv) {
    auxInitDisplayMode(AUX_SINGLE | AUX_RGB);
    auxInitPosition(0, 0, 800, 600);
    auxInitWindow("Parallelepiped with Lighting");
    textureDulap = incarcaTextura("textura.bmp");
    myInit();

    auxKeyFunc(AUX_LEFT, MutaStanga);
    auxKeyFunc(AUX_RIGHT, MutaDreapta);
    auxKeyFunc(AUX_UP, MutaSus);
    auxKeyFunc(AUX_DOWN, MutaJos);

    auxKeyFunc(AUX_x, RotesteXStanga);
    auxKeyFunc(AUX_y, RotesteXDreapta);
    auxKeyFunc(AUX_g, RotesteYStanga);
    auxKeyFunc(AUX_r, RotesteYDreapta);
    auxKeyFunc(AUX_z, RotesteZStanga);
    auxKeyFunc(AUX_t, RotesteZDreapta);

    auxKeyFunc(AUX_w, mutaSursaSpate);
    auxKeyFunc(AUX_s, mutaSursaFata);
    auxKeyFunc(AUX_d, mutaSursaDreapta);
    auxKeyFunc(AUX_a, mutaSursaStanga);

    auxKeyFunc(AUX_o, OpenDoor);
    auxKeyFunc(AUX_c, CloseDoor);

    auxReshapeFunc(myReshape);
    auxMainLoop(display);

    return 0;
}
